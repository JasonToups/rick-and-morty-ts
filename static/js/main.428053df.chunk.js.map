{"version":3,"sources":["assets/logo-RickAndMorty.png","assets/Characteropedia.png","components/RenderedCards/RenderedCards.tsx","pages/Home/Home.tsx","base/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","RenderedCards","data","useState","React","useEffect","printData","console","log","className","Home","results","setResults","getCharacters","fetch","then","response","json","catch","error","src","logo","alt","characteropedia","type","placeholder","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,kSC+B5BC,G,MA3BO,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,KACfC,EAAwBC,IAAxBD,SAAUE,EAAcD,IAAdC,UADwC,EAE5BF,EAAS,MAFmB,6BAI1DE,GAAU,WACRC,MACC,IAEH,IAAMA,EAAY,WAChBC,QAAQC,IAAIN,IAGd,OACE,6BAASO,UAAU,kBACjB,yBAAKA,UAAU,0BACb,mDAEF,yBAAKA,UAAU,2BACb,oCACA,oCACA,oCACA,wCCwCOC,EAvDF,WAAO,IACVP,EAAwBC,IAAxBD,SAAUE,EAAcD,IAAdC,UADD,EAEaF,EAAS,MAFtB,mBAEVQ,EAFU,KAEDC,EAFC,OAGqBT,EAAS,MAH9B,6BAKjBE,GAAU,WACRQ,MACC,IAEH,IAAMA,EAAgB,WAEpBC,MADY,8CAETC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAb,GACJK,QAAQC,IAAI,WAAYN,GACxBU,EAAWV,MAEZgB,OAAM,SAAAC,GACLZ,QAAQY,MAAM,SAAUA,OAI9B,OACE,iCACE,6BAASV,UAAU,eACjB,yBAAKA,UAAU,SACb,yBACEA,UAAU,qBACVW,IAAKC,IACLC,IAAI,wBAEN,yBACEb,UAAU,qBACVW,IAAKG,IACLD,IAAI,qBAGR,yBAAKb,UAAU,eACb,8BACE,2BACEA,UAAU,eACVe,KAAK,OACLC,YAAY,2BACd,2BACEhB,UAAU,gBACVe,KAAK,SACLE,MAAM,cAIbf,EAAU,kBAAC,EAAD,CAAeT,KAAMS,IAAc,+CChDrCgB,MARf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,QCKcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLZ,QAAQY,MAAMA,EAAMwB,c","file":"static/js/main.428053df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-RickAndMorty.96a9d4f0.png\";","module.exports = __webpack_public_path__ + \"static/media/Characteropedia.a44cbea7.png\";","import React from 'react';\n\nimport './RenderedCards.scss';\n\nconst RenderedCards = ({ data }: { [key: string]: any }) => {\n  const { useState, useEffect } = React;\n  const [results, setResults] = useState(null);\n\n  useEffect(() => {\n    printData();\n  }, []);\n\n  const printData = () => {\n    console.log(data);\n  };\n\n  return (\n    <section className='rendered-cards'>\n      <div className='rendered-cards--header'>\n        <h1>Number of Results:</h1>\n      </div>\n      <div className='rendered-cards--results'>\n        <h1>Card</h1>\n        <h1>Card</h1>\n        <h1>Card</h1>\n        <h1>Card</h1>\n      </div>\n    </section>\n  );\n};\n\nexport default RenderedCards;\n","import React from 'react';\n\nimport './Home.scss';\nimport '../../components/HomeHeader/HomeHeader.scss';\nimport '../../components/Search/Search.scss';\nimport logo from '../../assets/logo-RickAndMorty.png';\nimport characteropedia from '../../assets/Characteropedia.png';\n\nimport RenderedCards from '../../components/RenderedCards/RenderedCards';\n\nconst Home = () => {\n  const { useState, useEffect } = React;\n  const [results, setResults] = useState(null);\n  const [renderCards, setRenderCards] = useState(null);\n\n  useEffect(() => {\n    getCharacters();\n  }, []);\n\n  const getCharacters = () => {\n    const api = 'https://rickandmortyapi.com/api/character/';\n    fetch(api)\n      .then(response => response.json())\n      .then(data => {\n        console.log('Success:', data);\n        setResults(data);\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  };\n\n  return (\n    <section>\n      <section className='home-header'>\n        <div className='logos'>\n          <img\n            className='home-header--image'\n            src={logo}\n            alt='rick and morty logo'\n          />\n          <img\n            className='home-header--image'\n            src={characteropedia}\n            alt='characteropedia'\n          />\n        </div>\n        <div className='search-form'>\n          <form>\n            <input\n              className='search-field'\n              type='text'\n              placeholder='Search for a character'></input>\n            <input\n              className='submit-button'\n              type='submit'\n              value='submit'></input>\n          </form>\n        </div>\n      </section>\n      {results ? <RenderedCards data={results} /> : <h1>Loading Image</h1>}\n    </section>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport './App.scss';\nimport Home from '../pages/Home/Home';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './base/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}